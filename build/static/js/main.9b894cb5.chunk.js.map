{"version":3,"sources":["assets/loading.svg","utils/request.js","components/Loading.js","components/Location.js","pages/LocationDetails.js","App.js","serviceWorker.js","auth_config.js","index.js"],"names":["module","exports","url","getAccessTokenSilently","loginWithRedirect","a","token","fetch","headers","Accept","Authorization","response","json","data","console","error","Loading","className","src","loading","alt","Location","props","name","isOpen","LocationDetails","locationID","match","params","id","useState","location","setLocation","useAuth0","useEffect","request","process","endpoints","locations","getLocation","to","React","Component","App","setLocations","logout","isAuthenticated","handleLocationsClick","e","preventDefault","length","log","handleLogoutClick","returnTo","window","origin","href","onClick","Switch","Route","path","exact","render","map","key","component","Boolean","hostname","ReactDOM","domain","auth_config","clientId","redirectUri","audience","useRefreshTokens","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9b894cb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.c5590569.svg\";","export default async function (url, getAccessTokenSilently, loginWithRedirect) {\r\n  try {\r\n    let token = await getAccessTokenSilently();\r\n\r\n    let response = await fetch(url, {\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n\r\n    let data = await response.json();\r\n    return data;\r\n  } catch (e) {\r\n    console.error(e);\r\n    await loginWithRedirect();\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport loading from \"../assets/loading.svg\";\r\n\r\nconst Loading = () => (\r\n  <div className=\"spinner\">\r\n    <img src={loading} alt=\"Loading\" />\r\n  </div>\r\n);\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport \"./Location.css\";\r\n\r\nexport default function Location(props) {\r\n  const { name, isOpen } = props;\r\n\r\n  return (\r\n    <div className=\"location\">\r\n      <h2>{name}</h2>\r\n      <div>Open on Sunday : {isOpen ? <span>✔</span> : <span>❌</span>}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./LocationDetails.css\";\r\nimport Location from \"../components/Location\";\r\nimport request from \"../utils/request\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport endpoints from \"../endpoints\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function LocationDetails({ match }) {\r\n  let locationID = +match.params.id;\r\n\r\n  let [location, setLocation] = useState(null);\r\n\r\n  let { loginWithRedirect, getAccessTokenSilently } = useAuth0();\r\n\r\n  // Get POI details\r\n  useEffect(() => {\r\n    async function getLocation() {\r\n      let location = await request(\r\n        `${process.env.REACT_APP_SERVER_URL}${endpoints.locations}/${locationID}`,\r\n        getAccessTokenSilently,\r\n        loginWithRedirect\r\n      );\r\n\r\n      setLocation(location);\r\n    }\r\n\r\n    getLocation();\r\n  }, [locationID, getAccessTokenSilently, loginWithRedirect]);\r\n\r\n  return (\r\n    <div>\r\n      {location ? <Location {...location} /> : <p>Loading details...</p>}\r\n      <Link className=\"App-link\" to=\"/\">\r\n        Back\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { useAuth0 } from \"@auth0/auth0-react\";\r\nimport request from \"./utils/request\";\r\nimport endpoints from \"./endpoints\";\r\nimport Loading from \"./components/Loading\";\r\nimport { BrowserRouter, Link} from \"react-router-dom\";\r\nimport LocationDetails from \"./pages/LocationDetails\";\r\nimport Switch from \"react-router-dom/es/Switch\";\r\nimport Route from \"react-router-dom/es/Route\";\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport {zoom} from \"leaflet/src/control/Control.Zoom\";\r\nimport { FaBeer } from 'react-icons/fa';\r\n\r\n//============================Class Map=================================================================================\r\nclass MyMap extends React.Component {\r\n    constructor() {\r\n        super();\r\n         this.coord = {\r\n            lat: 46.28306238842186,\r\n            lng: 7.5387810396194554,\r\n            zoom: 12\r\n        }\r\n    }\r\n\r\n\r\n    diplayInfos = () => {\r\n        //Render the information about the establishment\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Map center={[this.coord.lat, this.coord.lng]} zoom={this.coord.zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a>\r\n                    contributors'\r\n                />\r\n                <Marker position={[this.coord.lat, this.coord.lng]} onClick={this.diplayInfos}>\r\n                    <Popup>\r\n                        <div>\r\n                            <h2>TechnoPole!</h2>\r\n                        </div>\r\n                    </Popup>\r\n                </Marker>\r\n            </Map>\r\n        );\r\n    }\r\n}\r\n//======================================================================================================================\r\n\r\n//=======================================Class navigation bar===========================================================\r\nclass NavBars extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.navRef = React.createRef();\r\n\r\n    }\r\n    closeNav = () => {\r\n        return this.navRef.current.style.width = 0;\r\n    }\r\n\r\n    openNav = () => {\r\n        return this.navRef.current.style.width = '250px';\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"topnav\">\r\n                    <input type=\"text\" placeholder=\"Search..\"/>\r\n                    <a className=\"active\" href=\"#home\">Home</a>\r\n                    <a href=\"#about\">About</a>\r\n                    <a href=\"#contact\">Contact</a>\r\n\r\n                    <span id=\"settings\" onClick={this.openNav}>ToolBox</span>\r\n                </div>\r\n\r\n                <div id=\"mySidenav\" className=\"sidenav\" ref={this.navRef}>\r\n                    <a href=\"javascript:void(0)\" className=\"closebtn\" onClick={this.closeNav}>&times;</a>\r\n                    <a href=\"#\">About</a>\r\n                    <a href=\"#\">Services</a>\r\n                    <a href=\"#\">Clients</a>\r\n                    <a href=\"#\">Contact</a>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n//======================================================================================================================\r\n\r\n//=================================Main Application=====================================================================\r\nfunction App() {\r\n\r\n    //Méthode onClick to display informations about the establishment\r\n\r\n    //Method to loop over each nearby establishment and check if the establishment is open or not\r\n    //If the establishment is open display its coordinates\r\n    //Retrive informations of the location to display it on the popup\r\n    //Info about the palce on the right and toolbox on the left\r\n    let [locations, setLocations] = useState([]);\r\n\r\n    let {\r\n        loading,\r\n        loginWithRedirect,\r\n        logout,\r\n        getAccessTokenSilently,\r\n        isAuthenticated,\r\n    } = useAuth0();\r\n\r\n    let handleLocationsClick = async (e) => {\r\n        e.preventDefault();\r\n        let locations = await request(\r\n            `${process.env.REACT_APP_SERVER_URL}${endpoints.locations}`,\r\n            getAccessTokenSilently,\r\n            loginWithRedirect\r\n        );\r\n\r\n        if (locations && locations.length > 0) {\r\n            console.log(locations);\r\n            setLocations(locations);\r\n        }\r\n    };\r\n\r\n    let handleLogoutClick = async (e) => {\r\n        e.preventDefault();\r\n        /*\r\n        returnTo parameter is necessary because multiple\r\n        apps use the same authentication backend\r\n        */\r\n        logout({ returnTo: window.location.origin });\r\n    };\r\n\r\n    if (loading) {\r\n        return <Loading />;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                {isAuthenticated && (\r\n                    <a\r\n                        className=\"App-link Logout-link\"\r\n                        href=\"#\"\r\n                        onClick={handleLogoutClick}\r\n                    >\r\n                        Logout\r\n                    </a>\r\n                )}\r\n                <h1>OpenSunday</h1>\r\n                <br />\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route\r\n                            path=\"/\"\r\n                            exact\r\n                            render={() => (\r\n                                <>\r\n                                    <a\r\n                                        className=\"App-link\"\r\n                                        href=\"#\"\r\n                                        onClick={handleLocationsClick}\r\n                                    >\r\n                                        Get Locations\r\n                                    </a>\r\n                                    {locations && locations.length > 0 && (\r\n                                        <ul className=\"Locations-List\">\r\n                                            {locations.map((location) => (\r\n                                                <li key={location.id}>\r\n                                                    <Link\r\n                                                        className=\"App-link\"\r\n                                                        to={`/location/${location.id}`}\r\n                                                    >\r\n                                                        {location.name}\r\n                                                    </Link>\r\n                                                </li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    )}\r\n                                </>\r\n                            )}\r\n                        />\r\n                        <Route path=\"/location/:id\" component={LocationDetails} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export default {\r\n  domain: process.env.REACT_APP_AUTH0_DOMAIN,\r\n  clientId: process.env.REACT_APP_AUTH0_CLIENTID,\r\n  audience: process.env.REACT_APP_AUTH0_AUDIENCE,\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport auth_config from './auth_config';\r\nimport { Auth0Provider } from \"@auth0/auth0-react\";\r\n\r\nReactDOM.render(\r\n  <Auth0Provider\r\n    domain={auth_config.domain}\r\n    clientId={auth_config.clientId}\r\n    redirectUri={window.location.origin}\r\n    audience={auth_config.audience}\r\n    useRefreshTokens={true}\r\n  >\r\n    <App />\r\n  </Auth0Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}